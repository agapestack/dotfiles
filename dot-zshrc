# -----------------
# Zsh General Configuration
# -----------------

# Remove older command from the history if a duplicate is to be added.
setopt HIST_IGNORE_ALL_DUPS
# Set editor default keymap to emacs (`-e`) or vi (`-v`)
bindkey -v
# Prompt for spelling correction of commands.
setopt CORRECT
# Customize spelling correction prompt.
SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '
# Remove path separator from WORDCHARS.
WORDCHARS=${WORDCHARS//[\/]}

# -----------------------
# Zim Configuration Start
# -----------------------

# --------------------
# Module configuration
# --------------------

# Append `../` to your input for each `.` you type after an initial `..`
zstyle ':zim:input' double-dot-expand yes
# Set a custom terminal title format using prompt expansion escape sequences.
zstyle ':zim:termtitle' format '%1~'
# zsh-autosuggestions
ZSH_AUTOSUGGEST_MANUAL_REBIND=1
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=242'
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)

# Customize the main highlighter styles. See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters/main.md#how-to-tweak-it
typeset -A ZSH_HIGHLIGHT_STYLES
ZSH_HIGHLIGHT_STYLES[comment]='fg=242'

# ------------------
# Initialize modules
# ------------------

ZIM_HOME=${ZDOTDIR:-${HOME}}/.zim
# Download zimfw plugin manager if missing.
if [[ ! -e ${ZIM_HOME}/zimfw.zsh ]]; then
  if (( ${+commands[curl]} )); then
    curl -fsSL --create-dirs -o ${ZIM_HOME}/zimfw.zsh \
        https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
  else
    mkdir -p ${ZIM_HOME} && wget -nv -O ${ZIM_HOME}/zimfw.zsh \
        https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
  fi
fi
# Install missing modules, and update ${ZIM_HOME}/init.zsh if missing or outdated.
if [[ ! ${ZIM_HOME}/init.zsh -nt ${ZDOTDIR:-${HOME}}/.zimrc ]]; then
  source ${ZIM_HOME}/zimfw.zsh init -q
fi
# Initialize modules.
source ${ZIM_HOME}/init.zsh

# ------------------------------
# Post-init module configuration
# ------------------------------
#
bindkey '^R' history-incremental-search-backward
bindkey '^S' history-incremental-search-forward

# zsh-history-substring-search
zmodload -F zsh/terminfo +p:terminfo
# Bind ^[[A/^[[B manually so up/down works both before and after zle-line-init
for key ('^[[A' '^P' ${terminfo[kcuu1]}) bindkey ${key} history-substring-search-up
for key ('^[[B' '^N' ${terminfo[kcud1]}) bindkey ${key} history-substring-search-down
for key ('k') bindkey -M vicmd ${key} history-substring-search-up
for key ('j') bindkey -M vicmd ${key} history-substring-search-down
unset key

# ---------------------
# Zim Configuration End
# ---------------------

# Aliases
alias vim="nvim"
alias vi="vim"
alias open="kde-open"
alias k='kubectl'

# Environment variables
export PATH="$PATH:/home/agape/.local/bin"
export TERM=xterm-256color
export QT_QPA_PLATFORM=xcb
export XDG_CONFIG_HOME=$HOME/.config

# Functions and aliases
alias init-makefile="copy_makefile"
copy_makefile() {
    local template_file="$HOME/dotfiles/templates/Makefile"
    local current_dir="$(pwd)"

    if [ -f "$template_file" ]; then
        cp "$template_file" "$current_dir"
        echo "Makefile copied to $(basename "$current_dir")"
    else
        echo "Template Makefile not found at $template_file"
    fi
}

alias init-notebook="init_notebook"
init_notebook() {
    local template_file="$HOME/dotfiles/templates/init.ipynb"
    local current_dir="$(pwd)"

    if [ -f "$template_file" ]; then
        cp "$template_file" "$current_dir"
        echo "Template Notebook copied to $(basename "$current_dir")"
    else
        echo "Template Notebook not found at $template_file"
    fi
}

alias public-ip="print_public_ip"
print_public_ip() {
    response=$(curl -s http://ip-api.com/json/)

    ip=$(echo $response | jq -r '.query')
    country=$(echo $response | jq -r '.country')
    region=$(echo $response | jq -r '.regionName')
    city=$(echo $response | jq -r '.city')
    isp=$(echo $response | jq -r '.isp')

    echo "Public IP: $ip"
    echo "Country: $country"
    echo "Region: $region"
    echo "City: $city"
    echo "ISP: $isp"
}

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/agape/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/agape/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/home/agape/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/agape/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<
# fi

eval "$(starship init zsh)"

# vim: set tabstop=4 shiftwidth=4 expandtab:

