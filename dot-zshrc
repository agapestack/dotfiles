############################################################################
#___________________________ general ______________________________________#


ZSH_THEME="powerlevel10k/powerlevel10k"

export ZSH="$HOME/.oh-my-zsh"

export PATH=$HOME/bin:/usr/local/bin:$PATH:$GOPATH/bin
export EDITOR='vim'
export VISUAL='vim'
export GOPATH=$HOME/go
export GOBIN=$HOME/bin

export QT_QPA_PLATFORMTHEME=qt5ct
export QT_QPA_PLATFORM=wayland
export GDK_BACKEND=wayland
export MOZ_ENABLE_WAYLAND=1
export GDK_DPI_SCALE=1.5
export QT_SCALE_FACTOR=1.5

# pnpm
export PNPM_HOME="/home/agape/.local/share/pnpm"
export PATH="$HOME/dotfiles/bin:$PNPM_HOME:$PATH"
# pnpm end
export _JAVA_AWT_WM_NONREPARENTING=1

alias "vi"="vim"
alias "list_monitors"=list_monitors
alias "list_apps"="swaymsg -t get_tree | less"
alias "list_inputs"="wev"
alias "init_Makefile"=init_Makefile
alias "kill_containers"=kill_containers

function kill_containers {
	docker kill $(sudo docker ps -q)
}

function list_monitors {
	swaymsg -t get_outputs $*
}

function init_Makefile {
	cp $HOME/dotfiles/templates/Makefile .
}

function extract {
	if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
    echo "       extract <path/file_name_1.ext> [path/file_name_2.ext] [path/file_name_3.ext]"
    return 1
 else
    for n in $@
    do
      if [ -f "$n" ] ; then
          case "${n%,}" in
            *.tar.bz2|*.tar.gz|*.tar.xz|*.tbz2|*.tgz|*.txz|*.tar)
                         tar xvf "$n"       ;;
            *.lzma)      unlzma ./"$n"      ;;
            *.bz2)       bunzip2 ./"$n"     ;;
            *.rar)       unrar x -ad ./"$n" ;;
            *.gz)        gunzip ./"$n"      ;;
            *.zip)       unzip ./"$n"       ;;
            *.z)         uncompress ./"$n"  ;;
            *.7z|*.arj|*.cab|*.chm|*.deb|*.dmg|*.iso|*.lzh|*.msi|*.rpm|*.udf|*.wim|*.xar)
                         7z x ./"$n"        ;;
            *.xz)        unxz ./"$n"        ;;
            *.exe)       cabextract ./"$n"  ;;
            *)
                         echo "extract: '$n' - unknown archive method"
                         return 1
                         ;;
          esac
      else
          echo "'$n' - file does not exist"
          return 1
      fi
    done
fi
}


# iptables aliases
alias "ipt-L"="sudo iptables -L --line-numbers"
alias "ipt-DI"="sudo iptables -D INPUT"
alias "ipt-DF"="sudo iptables -D FORWARD"
alias "ipt-DO"="sudo iptables -D OUTPUT"
alias "ipt-II"="sudo iptable -I INPUT"
alias "ipt-IF"="sudo iptables -I FORWARD"
alias "ipt-IO"="sudo iptables -I OUTPUT"

plugins=(
	git
	asdf
)

source $ZSH/oh-my-zsh.sh
source /opt/asdf-vm/asdf.sh

############################################################################

############################################################################
#___________________________ Sway  ______________________________________#
if [ "$(tty)" = "/dev/tty1" ]; then
	exec dbus-run-session sway
fi
############################################################################

############################################################################
#___________________________ powerlevel10k ________________________________#
source ~/.p10k.zsh
ZSH_THEME="powerlevel9k/powerlevel10k"

############################################################################

# To customize prompt, run `p9k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p9k.zsh ]] || source ~/.p10k.zsh
############################################################################
#___________________________ docker aliases _______________________________#
#     # Usage:                                                             #
#     daws <svc> <cmd> <opts> : aws cli in docker with <svc> <cmd> <opts>  #
#     dc             : docker-compose                                      #
#     dcu            : docker-compose up -d                                #
#     dcd            : docker-compose down                                 #
#     dcr            : docker-compose run                                  #
#     dex <container>: execute a bash shell inside the RUNNING <container> #
#     di <container> : docker inspect <container>                          #
#     dim            : docker images                                       #
#     dip            : IP addresses of all running containers              #
#     dl <container> : docker logs -f <container>                          #
#     dnames         : names of all running containers                     #
#     dps            : docker ps                                           #
#     dpsa           : docker ps -a                                        #
#     drmc           : remove all exited containers                        #
#     drmid          : remove all dangling images                          #
#     drun <image>   : execute a bash shell in NEW container from <image>  #
#     dsr <container>: stop then remove <container>                        #
#                                                                          #
############################################################################

function dnames-fn {
	for ID in `docker ps | awk '{print $1}' | grep -v 'CONTAINER'`
	do
    	docker inspect $ID | grep Name | head -1 | awk '{print $2}' | sed 's/,//g' | sed 's%/%%g' | sed 's/"//g'
	done
}

function dip-fn {
    echo "IP addresses of all named running containers"

    for DOC in `dnames-fn`
    do
        IP=`docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}} {{end}}' "$DOC"`
        OUT+=$DOC'\t'$IP'\n'
    done
    echo -e $OUT | column -t
    unset OUT
}

function dex-fn {
	docker exec -it $1 ${2:-bash}
}

function di-fn {
	docker inspect $1
}

function dl-fn {
	docker logs -f $1
}

function drun-fn {
	docker run -it $1 $2
}

function dcr-fn {
	docker-compose run $@
}

function dsr-fn {
	docker stop $1;docker rm $1
}

function drmc-fn {
       docker rm $(docker ps --all -q -f status=exited)
}

function drmid-fn {
       imgs=$(docker images -q -f dangling=true)
       [ ! -z "$imgs" ] && docker rmi "$imgs" || echo "no dangling images."
}

# in order to do things like dex $(dlab label) sh
function dlab {
       docker ps --filter="label=$1" --format="{{.ID}}"
}

function dc-fn {
        docker-compose $*
}

alias dc=dc-fn
alias dcu="docker-compose up -d"
alias dcd="docker-compose down"
alias dcr=dcr-fn
alias dex=dex-fn
alias di=di-fn
alias dim="docker images"
alias dip=dip-fn
alias dl=dl-fn
alias dnames=dnames-fn
alias dps="docker ps"
alias dpsa="docker ps -a"
alias drmc=drmc-fn
alias drmid=drmid-fn
alias drun=drun-fn
alias dsp="docker system prune --all"
alias dsr=dsr-fn
############################################################################



# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/agape/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/agape/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/home/agape/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/agape/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<
conda config --set auto_activate_base false

autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C /usr/bin/terraform terraform

# add Pulumi to the PATH
export PATH=$PATH:$HOME/.pulumi/bin
