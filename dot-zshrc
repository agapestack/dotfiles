# -------------------------------------------
# General Zsh Configuration
# -------------------------------------------
setopt HIST_IGNORE_ALL_DUPS
bindkey -v
bindkey '^R' history-incremental-search-backward
setopt CORRECT
SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '
WORDCHARS=${WORDCHARS//[\/]}

# -------------------------------------------
# Zim Framework Initialization
# -------------------------------------------
ZIM_HOME=${ZDOTDIR:-${HOME}}/.zim
if [[ ! -e ${ZIM_HOME}/zimfw.zsh ]]; then
  if (( ${+commands[curl]} )); then
    curl -fsSL --create-dirs -o ${ZIM_HOME}/zimfw.zsh \
        https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
  else
    mkdir -p ${ZIM_HOME} && wget -nv -O ${ZIM_HOME}/zimfw.zsh \
        https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
  fi
fi
if [[ ! ${ZIM_HOME}/init.zsh -nt ${ZDOTDIR:-${HOME}}/.zimrc ]]; then
  source ${ZIM_HOME}/zimfw.zsh init -q
fi
source ${ZIM_HOME}/init.zsh

# Zsh syntax highlighting and autosuggestions
ZSH_AUTOSUGGEST_MANUAL_REBIND=1
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=242'
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)
typeset -A ZSH_HIGHLIGHT_STYLES
ZSH_HIGHLIGHT_STYLES[comment]='fg=242'

# -------------------------------------------
# Aliases and Functions
# -------------------------------------------
alias vim="nvim"
alias vi="vim"
alias open="kde-open"
alias k='kubectl'
alias init-makefile="copy_makefile"

alias clean-pycache="find . -type d -name "__pycache__" -exec rm -r {} +"

# VastAI aliases
alias vastai='vastai_command'
alias vastai-sync='vastai_sync_command'

vastai_command() {
    python -m vastai "$@"
}

vastai_sync_command() {
    echo ""
    echo "🚀  \033[1;34mUploading sync script to Vast.ai...\033[0m"
    scp /home/agape/Compute/sync/vast-aws-sync.sh vastai-server:/root/vast-aws-sync.sh
    
    echo ""
    echo "⚙️   \033[1;34mRunning setup script on Vast.ai instance...\033[0m"
    ssh vastai-server "bash /root/vast-aws-sync.sh"
}
copy_makefile() {
    local template_file="$HOME/dotfiles/templates/Makefile"
    local current_dir="$(pwd)"

    if [ -f "$template_file" ]; then
        cp "$template_file" "$current_dir"
        echo "Makefile copied to $(basename "$current_dir")"
    else
        echo "Template Makefile not found at $template_file"
    fi
}

alias init-notebook="init_notebook"
init_notebook() {
    local template_file="$HOME/dotfiles/templates/init.ipynb"
    local current_dir="$(pwd)"

    if [ -f "$template_file" ]; then
        cp "$template_file" "$current_dir"
        echo "Template Notebook copied to $(basename "$current_dir")"
    else
        echo "Template Notebook not found at $template_file"
    fi
}

alias public-ip="print_public_ip"
print_public_ip() {
    response=$(curl -s http://ip-api.com/json/)

    ip=$(echo $response | jq -r '.query')
    country=$(echo $response | jq -r '.country')
    region=$(echo $response | jq -r '.regionName')
    city=$(echo $response | jq -r '.city')
    isp=$(echo $response | jq -r '.isp')

    echo "Public IP: $ip"
    echo "Country: $country"
    echo "Region: $region"
    echo "City: $city"
    echo "ISP: $isp"
}

# -------------------------------------------
# Environment Variables
# -------------------------------------------
export PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/.cargo/bin:$PATH"
export PATH="$HOME/.npm-global/bin:$PATH"
export TERM=xterm-256color
export QT_QPA_PLATFORM=xcb
export XDG_CONFIG_HOME=$HOME/.config
export EDITOR=nvim
export VISUAL=nvim

# -------------------------------------------
# Starship Prompt
# -------------------------------------------
if command -v starship > /dev/null 2>&1; then
    eval "$(starship init zsh)"
fi

# -------------------------------------------
# Initialize SSH agent (Can produce output, so moved below)
# -------------------------------------------
if [ -z "$SSH_AUTH_SOCK" ]; then
    eval "$(ssh-agent -s)" > /dev/null 2>&1
fi

# -------------------------------------------
# Conda Initialization (This might produce console output)
# -------------------------------------------
__conda_setup="$('/home/agape/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/agape/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/home/agape/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/agape/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup

# -------------------------------------------
# Node Version Manager
# -------------------------------------------
if [ -f /usr/share/nvm/init-nvm.sh ]; then
    source /usr/share/nvm/init-nvm.sh
fi

